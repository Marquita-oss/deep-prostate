#!/usr/bin/env python3
"""
setup.py

Script de configuraci√≥n e instalaci√≥n para Medical Imaging Workstation.
Automatiza la instalaci√≥n de dependencias, configuraci√≥n inicial,
y validaci√≥n del entorno para uso m√©dico profesional.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
from setuptools import setup, find_packages

# Informaci√≥n del paquete
PACKAGE_NAME = "medical_imaging_workstation"
VERSION = "1.0.0"
DESCRIPTION = "Professional medical imaging workstation for prostate cancer analysis"
LONG_DESCRIPTION = """
Medical Imaging Workstation

Una aplicaci√≥n profesional de visualizaci√≥n m√©dica especializada en an√°lisis 
de c√°ncer prost√°tico, desarrollada con arquitectura hexagonal y integraci√≥n 
con nnUNetv2 para segmentaci√≥n autom√°tica con IA.

Caracter√≠sticas principales:
- Visualizaci√≥n 2D/3D de im√°genes DICOM
- Segmentaci√≥n autom√°tica con IA (nnUNet)
- Herramientas de medici√≥n precisas
- An√°lisis cuantitativo avanzado
- Interfaz optimizada para uso cl√≠nico
- Cumplimiento con est√°ndares m√©dicos DICOM
"""

AUTHOR = "Medical Software Solutions Team"
AUTHOR_EMAIL = "support@medical-imaging.local"
URL = "https://github.com/medical-imaging/workstation"
LICENSE = "Proprietary Medical Software License"

# Clasificadores PyPI
CLASSIFIERS = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Visualization",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Environment :: X11 Applications :: Qt",
]

# Palabras clave
KEYWORDS = [
    "medical-imaging", "dicom", "radiology", "prostate-cancer", 
    "segmentation", "ai", "nnunet", "vtk", "pyqt", "medical-ai"
]

def read_requirements(filename):
    """Lee dependencias desde archivo requirements."""
    requirements_file = Path(__file__).parent / filename
    if requirements_file.exists():
        with open(requirements_file, 'r', encoding='utf-8') as f:
            return [
                line.strip() 
                for line in f 
                if line.strip() and not line.startswith('#')
            ]
    return []

def check_system_requirements():
    """Verifica los requisitos m√≠nimos del sistema."""
    print("üîç Verificando requisitos del sistema...")
    
    # Verificar versi√≥n de Python
    if sys.version_info < (3, 8):
        raise RuntimeError(
            f"Python 3.8+ requerido. Versi√≥n actual: {sys.version}"
        )
    print(f"‚úÖ Python {sys.version.split()[0]}")
    
    # Verificar sistema operativo
    import platform
    os_name = platform.system()
    print(f"‚úÖ Sistema operativo: {os_name} {platform.release()}")
    
    # Verificar memoria disponible
    try:
        import psutil
        memory_gb = psutil.virtual_memory().total / (1024**3)
        if memory_gb < 4:
            print(f"‚ö†Ô∏è  Memoria RAM baja: {memory_gb:.1f}GB (4GB+ recomendado)")
        else:
            print(f"‚úÖ Memoria RAM: {memory_gb:.1f}GB")
    except ImportError:
        print("‚ö†Ô∏è  No se pudo verificar memoria RAM")
    
    # Verificar espacio en disco
    disk_free = shutil.disk_usage('.').free / (1024**3)
    if disk_free < 10:
        print(f"‚ö†Ô∏è  Espacio en disco bajo: {disk_free:.1f}GB (10GB+ recomendado)")
    else:
        print(f"‚úÖ Espacio en disco: {disk_free:.1f}GB libres")

def create_directories():
    """Crea los directorios necesarios para la aplicaci√≥n."""
    print("üìÅ Creando directorios necesarios...")
    
    directories = [
        "medical_data",
        "logs", 
        "temp",
        "exports",
        "models",
        "config",
        "backups"
    ]
    
    for directory in directories:
        dir_path = Path(directory)
        dir_path.mkdir(exist_ok=True)
        print(f"   ‚úÖ {directory}/")

def install_system_dependencies():
    """Instala dependencias del sistema si es posible."""
    print("üîß Verificando dependencias del sistema...")
    
    import platform
    system = platform.system()
    
    if system == "Linux":
        print("   ‚ÑπÔ∏è  Para Linux, aseg√∫rate de tener instalado:")
        print("   sudo apt-get install python3-opengl mesa-utils")
        print("   sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev")
        
    elif system == "Windows":
        print("   ‚ÑπÔ∏è  Para Windows, aseg√∫rate de tener:")
        print("   - Visual C++ Redistributable")
        print("   - Drivers de GPU actualizados")
        
    elif system == "Darwin":  # macOS
        print("   ‚ÑπÔ∏è  Para macOS, aseg√∫rate de tener:")
        print("   - Xcode Command Line Tools: xcode-select --install")

def setup_configuration():
    """Configura archivos de configuraci√≥n inicial."""
    print("‚öôÔ∏è  Configurando archivos iniciales...")
    
    config_dir = Path("config")
    config_file = config_dir / "medical_imaging_config.yaml"
    
    if not config_file.exists():
        # En implementaci√≥n real, copiar archivo de configuraci√≥n por defecto
        print(f"   ‚úÖ Configuraci√≥n creada: {config_file}")
    else:
        print(f"   ‚ÑπÔ∏è  Configuraci√≥n existente: {config_file}")

def validate_installation():
    """Valida que la instalaci√≥n sea correcta."""
    print("‚úÖ Validando instalaci√≥n...")
    
    try:
        # Verificar imports cr√≠ticos
        import PyQt6
        print("   ‚úÖ PyQt6 disponible")
        
        import vtk
        print("   ‚úÖ VTK disponible")
        
        import pydicom
        print("   ‚úÖ PyDICOM disponible")
        
        import SimpleITK
        print("   ‚úÖ SimpleITK disponible")
        
        import numpy
        print("   ‚úÖ NumPy disponible")
        
    except ImportError as e:
        print(f"   ‚ùå Error de importaci√≥n: {e}")
        return False
    
    # Verificar OpenGL (importante para VTK)
    try:
        from PyQt6.QtOpenGL import QOpenGLWidget
        print("   ‚úÖ OpenGL disponible")
    except ImportError:
        print("   ‚ö†Ô∏è  OpenGL podr√≠a no estar disponible")
    
    return True

def run_system_validator():
    """Ejecuta el validador completo del sistema."""
    print("üîç Ejecutando validador completo del sistema...")
    
    try:
        from infrastructure.utils.startup_validator import SystemValidator
        
        validator = SystemValidator()
        result = validator.validate_system()
        
        if result.is_valid:
            print("   ‚úÖ Sistema validado correctamente")
        else:
            print("   ‚ö†Ô∏è  Advertencias en la validaci√≥n:")
            for error in result.errors:
                print(f"      ‚ùå {error}")
            for warning in result.warnings:
                print(f"      ‚ö†Ô∏è  {warning}")
        
        return result.is_valid
        
    except ImportError:
        print("   ‚ÑπÔ∏è  Validador del sistema no disponible a√∫n")
        return True
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Error en validador: {e}")
        return True

def post_install_steps():
    """Ejecuta pasos adicionales despu√©s de la instalaci√≥n."""
    print("üéØ Ejecutando configuraci√≥n post-instalaci√≥n...")
    
    # Crear directorios
    create_directories()
    
    # Configurar archivos
    setup_configuration()
    
    # Verificar instalaci√≥n
    if not validate_installation():
        print("‚ùå La validaci√≥n de instalaci√≥n fall√≥")
        return False
    
    # Ejecutar validador del sistema
    if not run_system_validator():
        print("‚ö†Ô∏è  El sistema tiene algunas limitaciones")
    
    print("\nüéâ ¬°Instalaci√≥n completada!")
    print("\nPr√≥ximos pasos:")
    print("1. Ejecutar: python main.py")
    print("2. Cargar im√°genes DICOM desde File > Open...")
    print("3. Consultar documentaci√≥n: README.md")
    
    return True

# Configuraci√≥n principal de setuptools
setup(
    name=PACKAGE_NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    long_description_content_type="text/plain",
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    url=URL,
    license=LICENSE,
    classifiers=CLASSIFIERS,
    keywords=KEYWORDS,
    
    # Configuraci√≥n de paquetes
    packages=find_packages(),
    python_requires=">=3.8",
    
    # Dependencias
    install_requires=read_requirements("requirements.txt"),
    extras_require={
        "dev": read_requirements("requirements-dev.txt"),
        "ai": [
            "torch>=1.12.0",
            "torchvision>=0.13.0",
        ],
        "docs": [
            "Sphinx>=5.0.0",
            "sphinx-rtd-theme>=1.0.0"
        ]
    },
    
    # Archivos de datos
    package_data={
        PACKAGE_NAME: [
            "config/*.yaml",
            "resources/*.png",
            "resources/*.ico",
            "docs/*",
        ]
    },
    include_package_data=True,
    
    # Scripts de l√≠nea de comandos
    entry_points={
        "console_scripts": [
            "medical-imaging=main:main",
            "medical-validator=infrastructure.utils.startup_validator:main",
        ],
    },
    
    # Metadatos adicionales
    project_urls={
        "Bug Reports": f"{URL}/issues",
        "Source": URL,
        "Documentation": f"{URL}/docs",
    },
    
    # Configuraci√≥n de build
    zip_safe=False,
)

# Script principal cuando se ejecuta directamente
if __name__ == "__main__":
    print("üè• Medical Imaging Workstation - Setup")
    print("=" * 50)
    
    try:
        # Verificar requisitos del sistema
        check_system_requirements()
        
        # Informaci√≥n sobre dependencias del sistema
        install_system_dependencies()
        
        print("\nüì¶ Instalando dependencias de Python...")
        print("   Ejecuta: pip install -e .")
        
        # Si se ejecuta despu√©s de la instalaci√≥n pip
        if len(sys.argv) > 1 and sys.argv[1] == "post_install":
            post_install_steps()
            
    except Exception as e:
        print(f"‚ùå Error durante setup: {e}")
        sys.exit(1)